#!/bin/bash

# Flutto CI/CD Workflows Repository Setup Script
# This script helps set up a new service repository to use centralized workflows

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
WORKFLOWS_REPO="zenvinnovations/flutto-cicd-workflows"
MANIFEST_REPO="zenvinnovations/flutto-deploy-manifests"

echo -e "${BLUE}🚀 Flutto CI/CD Repository Setup${NC}"
echo "=================================================="

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}❌ Error: Not in a git repository${NC}"
    echo "Please run this script from the root of your service repository."
    exit 1
fi

# Get repository information
REPO_NAME=$(basename $(git rev-parse --show-toplevel))
REPO_URL=$(git config --get remote.origin.url 2>/dev/null || echo "unknown")

echo -e "${BLUE}📋 Repository Information:${NC}"
echo "  Name: $REPO_NAME"
echo "  URL: $REPO_URL"
echo ""

# Determine service type
echo -e "${YELLOW}🔍 Determining service type...${NC}"
SERVICE_TYPE="unknown"
SERVICE_NAME=""

if [[ "$REPO_NAME" == *"frontend"* ]] || [[ -f "package.json" ]] || [[ -d "src" && -f "public/index.html" ]]; then
    SERVICE_TYPE="frontend"
    SERVICE_NAME="flutto-frontend"
    echo -e "${GREEN}✅ Detected: Frontend Service${NC}"
elif [[ "$REPO_NAME" == *"backend"* ]] || [[ -f "Gemfile" ]] || [[ -f "config/application.rb" ]]; then
    SERVICE_TYPE="backend"
    SERVICE_NAME="project_management_flutto"
    echo -e "${GREEN}✅ Detected: Backend Service${NC}"
else
    echo -e "${YELLOW}⚠️ Could not auto-detect service type${NC}"
    echo "Available options:"
    echo "1. Frontend (flutto-frontend)"
    echo "2. Backend (project_management_flutto)"
    echo "3. Custom service name"

    read -p "Please select [1-3]: " choice
    case $choice in
        1)
            SERVICE_TYPE="frontend"
            SERVICE_NAME="flutto-frontend"
            ;;
        2)
            SERVICE_TYPE="backend"
            SERVICE_NAME="project_management_flutto"
            ;;
        3)
            read -p "Enter custom service name: " SERVICE_NAME
            SERVICE_TYPE="custom"
            ;;
        *)
            echo -e "${RED}❌ Invalid choice${NC}"
            exit 1
            ;;
    esac
fi

echo "  Service Type: $SERVICE_TYPE"
echo "  Service Name: $SERVICE_NAME"
echo ""

# Create .github/workflows directory if it doesn't exist
echo -e "${YELLOW}📁 Creating workflow directory...${NC}"
mkdir -p .github/workflows

# Copy appropriate workflow template
WORKFLOW_FILE=".github/workflows/ci-cd.yml"
TEMPLATE_FILE=""

case $SERVICE_TYPE in
    "frontend")
        TEMPLATE_FILE="examples/frontend-workflow.yml"
        ;;
    "backend")
        TEMPLATE_FILE="examples/backend-workflow.yml"
        ;;
    *)
        TEMPLATE_FILE="examples/frontend-workflow.yml"
        echo -e "${YELLOW}⚠️ Using frontend template as base for custom service${NC}"
        ;;
esac

# Check if workflow file already exists
if [[ -f "$WORKFLOW_FILE" ]]; then
    echo -e "${YELLOW}⚠️ Workflow file already exists: $WORKFLOW_FILE${NC}"
    read -p "Do you want to overwrite it? [y/N]: " overwrite
    if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}ℹ️ Skipping workflow file creation${NC}"
    else
        # Download template (in real scenario, this would be from the workflows repo)
        echo -e "${GREEN}✅ Creating workflow file from template${NC}"
        cat > "$WORKFLOW_FILE" << 'EOF'
# This workflow file was generated by Flutto CI/CD setup script
# Customize it according to your service requirements

name: CI/CD Pipeline

on:
  push:
    branches: [main, staging, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, staging]

env:
  SERVICE_NAME: REPLACE_SERVICE_NAME

jobs:
  build:
    name: 🐳 Build & Push
    uses: zenvinnovations/flutto-cicd-workflows/.github/workflows/docker-build-push.yml@main
    with:
      service_name: ${{ env.SERVICE_NAME }}
      dockerfile_path: './Dockerfile'
      build_context: '.'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MANIFEST_UPDATE_TOKEN: ${{ secrets.MANIFEST_UPDATE_TOKEN }}

  security:
    name: 🔒 Security Scan
    needs: build
    uses: zenvinnovations/flutto-cicd-workflows/.github/workflows/security-scan.yml@main
    with:
      image_name: ${{ env.SERVICE_NAME }}
      image_tag: ${{ needs.build.outputs.image_tag }}
      fail_on_severity: 'HIGH,CRITICAL'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  promote-to-staging:
    name: 🚀 Promote to Staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [build, security]
    uses: zenvinnovations/flutto-cicd-workflows/.github/workflows/promote-environment.yml@main
    with:
      service_name: ${{ env.SERVICE_NAME }}
      from_environment: 'development'
      to_environment: 'staging'
      from_branch: 'develop'
      to_branch: 'staging'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
EOF

        # Replace service name placeholder
        sed -i "s/REPLACE_SERVICE_NAME/$SERVICE_NAME/g" "$WORKFLOW_FILE"
    fi
else
    echo -e "${GREEN}✅ Creating workflow file: $WORKFLOW_FILE${NC}"
    # Same template creation logic as above
    cat > "$WORKFLOW_FILE" << 'EOF'
# This workflow file was generated by Flutto CI/CD setup script

name: CI/CD Pipeline

on:
  push:
    branches: [main, staging, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, staging]

env:
  SERVICE_NAME: REPLACE_SERVICE_NAME

jobs:
  build:
    name: 🐳 Build & Push
    uses: zenvinnovations/flutto-cicd-workflows/.github/workflows/docker-build-push.yml@main
    with:
      service_name: ${{ env.SERVICE_NAME }}
      dockerfile_path: './Dockerfile'
      build_context: '.'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      MANIFEST_UPDATE_TOKEN: ${{ secrets.MANIFEST_UPDATE_TOKEN }}

  security:
    name: 🔒 Security Scan
    needs: build
    uses: zenvinnovations/flutto-cicd-workflows/.github/workflows/security-scan.yml@main
    with:
      image_name: ${{ env.SERVICE_NAME }}
      image_tag: ${{ needs.build.outputs.image_tag }}
      fail_on_severity: 'HIGH,CRITICAL'
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
EOF
    sed -i "s/REPLACE_SERVICE_NAME/$SERVICE_NAME/g" "$WORKFLOW_FILE"
fi

echo ""

# Check repository secrets
echo -e "${YELLOW}🔐 Checking repository secrets...${NC}"
echo "Required secrets for CI/CD workflows:"
echo "  - GITHUB_TOKEN (automatic)"
echo "  - MANIFEST_UPDATE_TOKEN (must be configured)"
echo ""
echo "To configure MANIFEST_UPDATE_TOKEN:"
echo "1. Go to GitHub Settings → Developer settings → Personal access tokens"
echo "2. Generate a token with 'repo' scope"
echo "3. Add it to repository secrets as MANIFEST_UPDATE_TOKEN"
echo ""

# Create Dockerfile if it doesn't exist
if [[ ! -f "Dockerfile" ]]; then
    echo -e "${YELLOW}🐳 Creating basic Dockerfile...${NC}"

    case $SERVICE_TYPE in
        "frontend")
            cat > Dockerfile << 'EOF'
# Multi-stage build for React frontend
FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF
            echo -e "${GREEN}✅ Created basic frontend Dockerfile${NC}"
            ;;
        "backend")
            cat > Dockerfile << 'EOF'
# Multi-stage build for Rails backend
FROM ruby:3.1-alpine AS base

RUN apk add --no-cache build-base postgresql-dev tzdata

FROM base AS dependencies

WORKDIR /app
COPY Gemfile Gemfile.lock ./
RUN bundle config set --local deployment true && \
    bundle config set --local without development test && \
    bundle install

FROM dependencies AS slim

WORKDIR /app
COPY . .
RUN bundle exec rails assets:precompile

EXPOSE 3000
CMD ["bundle", "exec", "rails", "server", "-b", "0.0.0.0"]
EOF
            echo -e "${GREEN}✅ Created basic backend Dockerfile${NC}"
            ;;
        *)
            echo -e "${BLUE}ℹ️ Skipped Dockerfile creation for custom service${NC}"
            ;;
    esac
fi

echo ""

# Deployment status check
echo -e "${YELLOW}📊 Checking deployment configuration...${NC}"
echo "Deployment manifests should be in: $MANIFEST_REPO"
echo "Expected manifest files:"
case $SERVICE_TYPE in
    "frontend")
        echo "  - argocd/flutto-frontend-development.yaml"
        echo "  - argocd/flutto-frontend-staging.yaml"
        echo "  - argocd/flutto-frontend-production.yaml"
        ;;
    "backend")
        echo "  - argocd/openproject-flutto-development.yaml"
        echo "  - argocd/openproject-flutto-staging.yaml"
        echo "  - argocd/openproject-flutto-production.yaml"
        ;;
esac

echo ""

# Final summary
echo -e "${GREEN}🎉 Setup Complete!${NC}"
echo "=================================================="
echo "Next steps:"
echo "1. ✅ Workflow file created: $WORKFLOW_FILE"
echo "2. 🔐 Configure MANIFEST_UPDATE_TOKEN in repository secrets"
echo "3. 🐳 Review and customize Dockerfile if needed"
echo "4. 📋 Ensure deployment manifests exist in $MANIFEST_REPO"
echo "5. 🧪 Test the workflow by pushing to develop branch"
echo ""
echo "Documentation:"
echo "- Workflow usage: https://github.com/$WORKFLOWS_REPO/blob/main/docs/workflow-usage.md"
echo "- Examples: https://github.com/$WORKFLOWS_REPO/tree/main/examples"
echo ""
echo -e "${BLUE}🚀 Ready to deploy with Flutto CI/CD!${NC}"