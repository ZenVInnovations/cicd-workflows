name: Centralized Docker Build and Push

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Service name (flutto-frontend or project_management_flutto)'
        required: true
        type: string
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: './Dockerfile'
      docker_target:
        description: 'Docker build target (for multi-stage builds)'
        required: false
        type: string
        default: ''
      build_script:
        description: 'Build script path (for frontend)'
        required: false
        type: string
        default: ''
      build_context:
        description: 'Docker build context'
        required: false
        type: string
        default: '.'
    outputs:
      image_tag:
        description: 'Generated image tag'
        value: ${{ jobs.build-push.outputs.image_tag }}
      environment:
        description: 'Target environment'
        value: ${{ jobs.build-push.outputs.environment }}
    secrets:
      GITHUB_TOKEN:
        required: true
      MANIFEST_UPDATE_TOKEN:
        required: true

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}
      environment: ${{ steps.tag.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Environment and Tag
        id: tag
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          SHORT_SHA=${GITHUB_SHA::7}
          TIMESTAMP=$(date +%Y%m%d.%H%M%S)
          BUILD_NUMBER=${{ github.run_number }}

          echo "Branch: $BRANCH_NAME"

          case "$BRANCH_NAME" in
            "main")
              TAG="v${TIMESTAMP}"
              ENVIRONMENT="production"
              ENV_TAG="production"
              ;;
            "staging")
              TAG="staging-v${TIMESTAMP}-rc.${BUILD_NUMBER}"
              ENVIRONMENT="staging"
              ENV_TAG="staging"
              ;;
            "develop")
              TAG="dev-${SHORT_SHA}"
              ENVIRONMENT="development"
              ENV_TAG="development"
              ;;
            *)
              if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                TAG="pr-${{ github.event.pull_request.number }}-${SHORT_SHA}"
                ENVIRONMENT="pr"
                ENV_TAG="pr"
              else
                TAG="feature-${BRANCH_NAME//\//-}-${SHORT_SHA}"
                ENVIRONMENT="feature"
                ENV_TAG="feature"
              fi
              ;;
          esac

          echo "Generated tag: $TAG"
          echo "Environment: $ENVIRONMENT"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "env_tag=$ENV_TAG" >> $GITHUB_OUTPUT

      - name: Frontend Build (if using build script)
        if: inputs.service_name == 'flutto-frontend' && inputs.build_script != ''
        run: |
          echo "🔧 Running frontend build script: ${{ inputs.build_script }}"
          chmod +x ${{ inputs.build_script }}
          ${{ inputs.build_script }}

      - name: Build Docker Image
        id: build
        run: |
          echo "🐳 Building Docker image for ${{ inputs.service_name }}"

          # Build command based on service type
          if [[ "${{ inputs.service_name }}" == "project_management_flutto" ]]; then
            # Backend build with target slim
            docker build \
              -f ${{ inputs.dockerfile_path }} \
              --target slim \
              -t ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
              ${{ inputs.build_context }}
          else
            # Frontend or generic build
            if [[ -n "${{ inputs.docker_target }}" ]]; then
              docker build \
                -f ${{ inputs.dockerfile_path }} \
                --target ${{ inputs.docker_target }} \
                -t ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
                ${{ inputs.build_context }}
            else
              docker build \
                -f ${{ inputs.dockerfile_path }} \
                -t ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
                ${{ inputs.build_context }}
            fi
          fi

      - name: Tag Images for GHCR
        run: |
          echo "🏷️ Tagging images for GHCR"

          # Tag with specific version
          docker tag ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
            ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}

          # Tag with environment
          docker tag ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
            ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.env_tag }}

      - name: Push to GHCR
        run: |
          echo "📤 Pushing images to GHCR"

          # Push specific version tag
          docker push ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}

          # Push environment tag
          docker push ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.env_tag }}

          echo "✅ Successfully pushed:"
          echo "  - ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}"
          echo "  - ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.env_tag }}"

      - name: Update Deployment Manifests
        if: steps.tag.outputs.environment != 'pr' && steps.tag.outputs.environment != 'feature'
        run: |
          echo "📝 Updating deployment manifests"

          # Clone manifests repository
          git clone https://${{ secrets.MANIFEST_UPDATE_TOKEN }}@github.com/zenvinnovations/flutto-deploy-manifests.git manifests
          cd manifests

          # Configure git
          git config --global user.name "Flutto CI/CD Bot"
          git config --global user.email "cicd@flutto.ai"

          # Determine manifest file
          ENVIRONMENT="${{ steps.tag.outputs.environment }}"
          SERVICE="${{ inputs.service_name }}"

          case "$SERVICE" in
            "flutto-frontend")
              MANIFEST_FILE="argocd/flutto-frontend-${ENVIRONMENT}.yaml"
              ;;
            "project_management_flutto")
              MANIFEST_FILE="argocd/openproject-flutto-${ENVIRONMENT}.yaml"
              ;;
          esac

          echo "Updating manifest: $MANIFEST_FILE"

          # Check if manifest exists
          if [[ ! -f "$MANIFEST_FILE" ]]; then
            echo "⚠️ Manifest not found: $MANIFEST_FILE"
            echo "Available manifests:"
            find argocd/ -name "*.yaml" -type f | head -10
            exit 1
          fi

          # Update image tag in manifest
          # Use both sed and yq approach for reliability
          if command -v yq >/dev/null 2>&1; then
            echo "Using yq to update manifest"
            yq eval -i '.spec.source.helm.values = (.spec.source.helm.values | sub("tag: \".*\""; "tag: \"${{ steps.tag.outputs.tag }}\""))' "$MANIFEST_FILE"
          else
            echo "Using sed to update manifest"
            sed -i 's/tag: "[^"]*"/tag: "${{ steps.tag.outputs.tag }}"/' "$MANIFEST_FILE"
          fi

          # Verify update
          if grep -q "${{ steps.tag.outputs.tag }}" "$MANIFEST_FILE"; then
            echo "✅ Successfully updated tag in manifest"
          else
            echo "❌ Failed to update tag - trying alternative approach"
            # Alternative sed approach
            sed -i "s/tag: .*/tag: \"${{ steps.tag.outputs.tag }}\"/" "$MANIFEST_FILE"

            if grep -q "${{ steps.tag.outputs.tag }}" "$MANIFEST_FILE"; then
              echo "✅ Successfully updated with alternative approach"
            else
              echo "❌ All update attempts failed"
              exit 1
            fi
          fi

          # Commit and push
          git add "$MANIFEST_FILE"
          git commit -m "🚀 Deploy ${{ inputs.service_name }} ${{ steps.tag.outputs.tag }} to ${{ steps.tag.outputs.environment }}

          Deployment Details:
          - Service: ${{ inputs.service_name }}
          - Environment: ${{ steps.tag.outputs.environment }}
          - Image: ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}
          - Branch: ${GITHUB_REF#refs/heads/}
          - Commit: ${{ github.sha }}
          - Actor: ${{ github.actor }}
          - Workflow Run: ${{ github.run_id }}"

          git push origin main
          echo "✅ Manifest updated and pushed successfully"

      - name: Create Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Service | ${{ inputs.service_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ steps.tag.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tag | ${{ steps.tag.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${GITHUB_REF#refs/heads/} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.tag.outputs.environment }}" != "pr" && "${{ steps.tag.outputs.environment }}" != "feature" ]]; then
            echo "### 🌐 Deployment URLs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            case "${{ inputs.service_name }}" in
              "flutto-frontend")
                case "${{ steps.tag.outputs.environment }}" in
                  "production") echo "- **Production**: https://zenv.flutto.ai" >> $GITHUB_STEP_SUMMARY ;;
                  "staging") echo "- **Staging**: https://staging.flutto.ai" >> $GITHUB_STEP_SUMMARY ;;
                  "development") echo "- **Development**: https://dev.flutto.ai" >> $GITHUB_STEP_SUMMARY ;;
                esac
                ;;
              "project_management_flutto")
                case "${{ steps.tag.outputs.environment }}" in
                  "production")
                    echo "- **Production API**: https://backend.flutto.ai" >> $GITHUB_STEP_SUMMARY
                    echo "- **Health Check**: https://backend.flutto.ai/health_checks/default" >> $GITHUB_STEP_SUMMARY
                    ;;
                  "staging")
                    echo "- **Staging API**: https://stage-backend.flutto.ai" >> $GITHUB_STEP_SUMMARY
                    echo "- **Health Check**: https://stage-backend.flutto.ai/health_checks/default" >> $GITHUB_STEP_SUMMARY
                    ;;
                  "development")
                    echo "- **Development API**: https://develop-backend.flutto.ai" >> $GITHUB_STEP_SUMMARY
                    echo "- **Health Check**: https://develop-backend.flutto.ai/health_checks/default" >> $GITHUB_STEP_SUMMARY
                    ;;
                esac
                ;;
            esac
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- ArgoCD will automatically sync and deploy within 3 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployment in ArgoCD dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Verify application health at the URLs above" >> $GITHUB_STEP_SUMMARY