name: Environment Promotion

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Service name to promote'
        required: true
        type: string
      from_environment:
        description: 'Source environment'
        required: true
        type: string
      to_environment:
        description: 'Target environment'
        required: true
        type: string
      from_branch:
        description: 'Source branch'
        required: true
        type: string
      to_branch:
        description: 'Target branch'
        required: true
        type: string
    secrets:
      GITHUB_TOKEN:
        required: true

jobs:
  create-promotion-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.from_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git Configuration
        run: |
          git config --global user.name "Flutto Promotion Bot"
          git config --global user.email "promotion-bot@flutto.ai"

      - name: Generate Promotion Branch Name
        id: branch
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          PROMOTION_BRANCH="auto-promote/${{ inputs.service_name }}-to-${{ inputs.to_environment }}-${TIMESTAMP}"
          echo "promotion_branch=$PROMOTION_BRANCH" >> $GITHUB_OUTPUT
          echo "Generated branch: $PROMOTION_BRANCH"

      - name: Get Deployment Information
        id: deployment_info
        run: |
          echo "üîç Gathering deployment information"

          # Get current deployed version in target environment
          if [[ "${{ inputs.service_name }}" == "flutto-frontend" ]]; then
            MANIFEST_FILE="argocd/flutto-frontend-${{ inputs.to_environment }}.yaml"
          else
            MANIFEST_FILE="argocd/openproject-flutto-${{ inputs.to_environment }}.yaml"
          fi

          if [[ -f "$MANIFEST_FILE" ]]; then
            # Try to extract current tag
            CURRENT_TAG=$(grep -o 'tag: "[^"]*"' "$MANIFEST_FILE" | cut -d'"' -f2 || echo "none")
            echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
            echo "Current tag in ${{ inputs.to_environment }}: $CURRENT_TAG"
          else
            echo "current_tag=none" >> $GITHUB_OUTPUT
            echo "Manifest file not found: $MANIFEST_FILE"
          fi

          # Get the new tag from source environment manifest
          if [[ "${{ inputs.service_name }}" == "flutto-frontend" ]]; then
            SOURCE_MANIFEST="argocd/flutto-frontend-${{ inputs.from_environment }}.yaml"
          else
            SOURCE_MANIFEST="argocd/openproject-flutto-${{ inputs.from_environment }}.yaml"
          fi

          if [[ -f "$SOURCE_MANIFEST" ]]; then
            NEW_TAG=$(grep -o 'tag: "[^"]*"' "$SOURCE_MANIFEST" | cut -d'"' -f2 || echo "unknown")
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
            echo "New tag from ${{ inputs.from_environment }}: $NEW_TAG"
          else
            echo "new_tag=unknown" >> $GITHUB_OUTPUT
            echo "Source manifest not found: $SOURCE_MANIFEST"
          fi

      - name: Generate Changelog
        id: changelog
        run: |
          echo "üìù Generating changelog"

          # Get commits since last promotion
          if git rev-parse --verify "origin/${{ inputs.to_branch }}" >/dev/null 2>&1; then
            # Get commits that are in from_branch but not in to_branch
            COMMITS=$(git log origin/${{ inputs.to_branch }}..origin/${{ inputs.from_branch }} \
              --pretty=format:"- %s (%h)" --no-merges | head -20)
          else
            # If to_branch doesn't exist, get recent commits from from_branch
            COMMITS=$(git log origin/${{ inputs.from_branch }} \
              --pretty=format:"- %s (%h)" --no-merges | head -10)
          fi

          if [[ -z "$COMMITS" ]]; then
            COMMITS="- No new commits since last promotion"
          fi

          echo "Generated changelog:"
          echo "$COMMITS"

          # Save changelog to output (handle multiline)
          {
            echo "changelog<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Promotion Branch
        run: |
          echo "üåø Creating promotion branch"
          git checkout -b ${{ steps.branch.outputs.promotion_branch }}
          git push origin ${{ steps.branch.outputs.promotion_branch }}

      - name: Determine Reviewers and Labels
        id: review_config
        run: |
          case "${{ inputs.to_environment }}" in
            "production")
              echo "reviewers=srimanreddy99" >> $GITHUB_OUTPUT
              echo "team_reviewers=" >> $GITHUB_OUTPUT
              echo "labels=deployment,production,critical,auto-promotion" >> $GITHUB_OUTPUT
              echo "required_approvals=2" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "reviewers=srimanreddy99" >> $GITHUB_OUTPUT
              echo "team_reviewers=" >> $GITHUB_OUTPUT
              echo "labels=deployment,staging,auto-promotion" >> $GITHUB_OUTPUT
              echo "required_approvals=1" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "reviewers=srimanreddy99" >> $GITHUB_OUTPUT
              echo "team_reviewers=" >> $GITHUB_OUTPUT
              echo "labels=deployment,auto-promotion" >> $GITHUB_OUTPUT
              echo "required_approvals=1" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Get Service URLs
        id: urls
        run: |
          case "${{ inputs.service_name }}" in
            "flutto-frontend")
              case "${{ inputs.to_environment }}" in
                "production")
                  echo "primary_url=https://zenv.flutto.ai" >> $GITHUB_OUTPUT
                  ;;
                "staging")
                  echo "primary_url=https://staging.flutto.ai" >> $GITHUB_OUTPUT
                  ;;
                "development")
                  echo "primary_url=https://dev.flutto.ai" >> $GITHUB_OUTPUT
                  ;;
              esac
              ;;
            "project_management_flutto")
              case "${{ inputs.to_environment }}" in
                "production")
                  echo "primary_url=https://backend.flutto.ai" >> $GITHUB_OUTPUT
                  echo "health_url=https://backend.flutto.ai/health_checks/default" >> $GITHUB_OUTPUT
                  ;;
                "staging")
                  echo "primary_url=https://stage-backend.flutto.ai" >> $GITHUB_OUTPUT
                  echo "health_url=https://stage-backend.flutto.ai/health_checks/default" >> $GITHUB_OUTPUT
                  ;;
                "development")
                  echo "primary_url=https://develop-backend.flutto.ai" >> $GITHUB_OUTPUT
                  echo "health_url=https://develop-backend.flutto.ai/health_checks/default" >> $GITHUB_OUTPUT
                  ;;
              esac
              ;;
          esac

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìã Creating promotion pull request"

          # Construct PR body
          PR_BODY="## üöÄ Environment Promotion

          **Service**: \`${{ inputs.service_name }}\`
          **From**: ${{ inputs.from_environment }} ‚Üí **To**: ${{ inputs.to_environment }}
          **Current Version**: \`${{ steps.deployment_info.outputs.current_tag }}\`
          **New Version**: \`${{ steps.deployment_info.outputs.new_tag }}\`

          ### üìã Pre-Deployment Checklist

          - [ ] All tests passed in ${{ inputs.from_environment }} environment
          - [ ] No critical security vulnerabilities detected
          - [ ] Application is healthy in ${{ inputs.from_environment }}
          - [ ] Database migrations reviewed (if applicable)
          - [ ] Rollback plan confirmed

          ### üîÑ Recent Changes

          ${{ steps.changelog.outputs.changelog }}

          ### üåê Deployment URLs

          After successful deployment, the service will be available at:
          - **Primary URL**: ${{ steps.urls.outputs.primary_url }}$(if [[ -n \"${{ steps.urls.outputs.health_url }}\" ]]; then echo \" - **Health Check**: ${{ steps.urls.outputs.health_url }}\"; fi)

          ### üõ°Ô∏è Safety Measures

          - **Automated Health Checks**: Post-deployment verification will run automatically
          - **Monitoring**: Deployment will be monitored for 15 minutes after completion
          - **Rollback**: Use \`/rollback ${{ inputs.service_name }} ${{ inputs.to_environment }} ${{ steps.deployment_info.outputs.current_tag }}\` if issues occur

          ### üö® Approval Requirements

          **${{ inputs.to_environment == 'production' && 'Production Deployment' || 'Staging Deployment' }}**: Requires **${{ steps.review_config.outputs.required_approvals }}** approval(s) from team members.

          ### ü§ñ Automation Details

          - **Triggered by**: Successful deployment to ${{ inputs.from_environment }}
          - **Source Branch**: ${{ inputs.from_branch }}
          - **Target Branch**: ${{ inputs.to_branch }}
          - **Promotion Branch**: ${{ steps.branch.outputs.promotion_branch }}
          - **Actor**: @${{ github.actor }}

          ---
          ü§ñ *This PR was automatically created by the Flutto CI/CD system.*"

          # Create the pull request
          gh pr create \
            --base "${{ inputs.to_branch }}" \
            --head "${{ steps.branch.outputs.promotion_branch }}" \
            --title "üöÄ [AUTO] Promote ${{ inputs.service_name }} to ${{ inputs.to_environment }}" \
            --body "$PR_BODY" \
            --label "${{ steps.review_config.outputs.labels }}" \
            --reviewer "${{ steps.review_config.outputs.reviewers }}"

          echo "‚úÖ Pull request created successfully"

      - name: Post Promotion Summary
        run: |
          echo "## üöÄ Environment Promotion Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Service | ${{ inputs.service_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| From Environment | ${{ inputs.from_environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| To Environment | ${{ inputs.to_environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Current Version | ${{ steps.deployment_info.outputs.current_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| New Version | ${{ steps.deployment_info.outputs.new_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Required Approvals | ${{ steps.review_config.outputs.required_approvals }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Promotion Branch | ${{ steps.branch.outputs.promotion_branch }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìç Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the automatically created pull request" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify all checklist items are completed" >> $GITHUB_STEP_SUMMARY
          echo "3. Get required approvals (${{ steps.review_config.outputs.required_approvals }} needed)" >> $GITHUB_STEP_SUMMARY
          echo "4. Merge the PR to trigger deployment" >> $GITHUB_STEP_SUMMARY
          echo "5. Monitor the deployment in ArgoCD" >> $GITHUB_STEP_SUMMARY