name: Centralized Docker Build and Push

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Service name (flutto-frontend or project_management_flutto)'
        required: true
        type: string
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: './Dockerfile'
      docker_target:
        description: 'Docker build target (for multi-stage builds)'
        required: false
        type: string
        default: ''
      build_script:
        description: 'Build script path (for frontend)'
        required: false
        type: string
        default: ''
      build_context:
        description: 'Docker build context'
        required: false
        type: string
        default: '.'
    outputs:
      image_tag:
        description: 'Generated image tag'
        value: ${{ jobs.build-push.outputs.image_tag }}
      environment:
        description: 'Target environment'
        value: ${{ jobs.build-push.outputs.environment }}
    secrets:
      CONTAINER_REGISTRY_TOKEN:
        required: true
      MANIFEST_UPDATE_TOKEN:
        required: true

jobs:
  build-push:
    runs-on: [self-hosted, linux, x64, zenvinnovations]
    outputs:
      image_tag: ${{ steps.tag.outputs.tag }}
      environment: ${{ steps.tag.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: zenvinnovations
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

      - name: Generate Environment and Tag
        id: tag
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          SHORT_SHA=${GITHUB_SHA::7}
          TIMESTAMP=$(date +%Y%m%d.%H%M%S)
          BUILD_NUMBER=${{ github.run_number }}

          echo "Branch: $BRANCH_NAME"

          case "$BRANCH_NAME" in
            "main")
              TAG="v${TIMESTAMP}"
              ENVIRONMENT="production"
              ENV_TAG="production"
              ;;
            "staging")
              TAG="staging-v${TIMESTAMP}-rc.${BUILD_NUMBER}"
              ENVIRONMENT="staging"
              ENV_TAG="staging"
              ;;
            "develop")
              TAG="dev-${SHORT_SHA}"
              ENVIRONMENT="development"
              ENV_TAG="development"
              ;;
            *)
              if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                TAG="pr-${{ github.event.pull_request.number }}-${SHORT_SHA}"
                ENVIRONMENT="pr"
                ENV_TAG="pr"
              else
                TAG="feature-${BRANCH_NAME//\//-}-${SHORT_SHA}"
                ENVIRONMENT="feature"
                ENV_TAG="feature"
              fi
              ;;
          esac

          echo "Generated tag: $TAG"
          echo "Environment: $ENVIRONMENT"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "env_tag=$ENV_TAG" >> $GITHUB_OUTPUT

      - name: Setup Node.js and pnpm (for frontend builds)
        if: inputs.service_name == 'flutto-frontend' && inputs.build_script != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm (for frontend builds)
        if: inputs.service_name == 'flutto-frontend' && inputs.build_script != ''
        run: |
          echo "üì¶ Installing pnpm..."
          npm install -g pnpm@latest
          pnpm --version

      - name: Debug - List repository contents
        if: inputs.service_name == 'flutto-frontend' && inputs.build_script != ''
        run: |
          echo "üîç Current working directory: $(pwd)"
          echo "üìÅ Repository root contents:"
          ls -la
          echo "üìÅ Scripts directory contents:"
          ls -la scripts/ || echo "‚ùå scripts/ directory not found"
          echo "üéØ Looking for build script: ${{ inputs.build_script }}"
          [ -f "${{ inputs.build_script }}" ] && echo "‚úÖ Build script exists" || echo "‚ùå Build script NOT found"

      - name: Frontend Build (if using build script)
        if: inputs.service_name == 'flutto-frontend' && inputs.build_script != ''
        run: |
          echo "üîß Running frontend build script: ${{ inputs.build_script }}"

          # Check if script exists
          if [ ! -f "${{ inputs.build_script }}" ]; then
            echo "‚ùå Build script not found: ${{ inputs.build_script }}"
            echo "üìÅ Available files in scripts directory:"
            ls -la scripts/ || echo "scripts/ directory not found"
            echo "üìÅ Available files in current directory:"
            ls -la .
            exit 1
          fi

          # Make script executable and run
          chmod +x ${{ inputs.build_script }}
          ${{ inputs.build_script }}

      - name: Build Docker Image
        id: build
        run: |
          echo "üê≥ Building Docker image for ${{ inputs.service_name }}"

          # Build command based on service type
          if [[ "${{ inputs.service_name }}" == "project_management_flutto" ]]; then
            # Backend build with target slim
            docker build \
              -f ${{ inputs.dockerfile_path }} \
              --target slim \
              -t ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
              ${{ inputs.build_context }}
          else
            # Frontend or generic build
            if [[ -n "${{ inputs.docker_target }}" ]]; then
              docker build \
                -f ${{ inputs.dockerfile_path }} \
                --target ${{ inputs.docker_target }} \
                -t ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
                ${{ inputs.build_context }}
            else
              docker build \
                -f ${{ inputs.dockerfile_path }} \
                -t ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
                ${{ inputs.build_context }}
            fi
          fi

      - name: Tag Images for GHCR
        run: |
          echo "üè∑Ô∏è Tagging images for GHCR"

          # Tag with specific version
          docker tag ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
            ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}

          # Tag with environment
          docker tag ${{ inputs.service_name }}:${{ steps.tag.outputs.tag }} \
            ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.env_tag }}

      - name: Push to GHCR
        run: |
          echo "üì§ Pushing images to GHCR"

          # Show what we're about to push
          echo "üîç Images to push:"
          echo "  - ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}"
          echo "  - ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.env_tag }}"

          # Show local images
          echo "üîç Local images available:"
          docker images | grep ${{ inputs.service_name }} || echo "No local images found"

          # Push specific version tag
          echo "üì§ Pushing specific tag: ${{ steps.tag.outputs.tag }}"
          if docker push ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}; then
            echo "‚úÖ Successfully pushed specific tag"
          else
            echo "‚ùå Failed to push specific tag"
            exit 1
          fi

          # Push environment tag
          echo "üì§ Pushing environment tag: ${{ steps.tag.outputs.env_tag }}"
          if docker push ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.env_tag }}; then
            echo "‚úÖ Successfully pushed environment tag"
          else
            echo "‚ùå Failed to push environment tag"
            exit 1
          fi

          echo "‚úÖ Successfully pushed all images:"
          echo "  - ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}"
          echo "  - ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.env_tag }}"

      - name: Update Deployment Manifests
        if: steps.tag.outputs.environment != 'pr' && steps.tag.outputs.environment != 'feature'
        run: |
          echo "üìù Updating deployment manifests"

          # Clone manifests repository
          git clone https://${{ secrets.MANIFEST_UPDATE_TOKEN }}@github.com/zenvinnovations/flutto-deployment-manifests.git manifests
          cd manifests

          # Configure git
          git config --global user.name "Flutto CI/CD Bot"
          git config --global user.email "cicd@flutto.ai"

          # Determine values file and service key
          ENVIRONMENT="${{ steps.tag.outputs.environment }}"
          SERVICE="${{ inputs.service_name }}"

          # Map environment names to match values files
          case "$ENVIRONMENT" in
            "development")
              ENV_FILE="dev"
              ;;
            "staging")
              ENV_FILE="staging"
              ;;
            "production")
              ENV_FILE="production"
              ;;
            *)
              echo "‚ö†Ô∏è Unsupported environment: $ENVIRONMENT"
              exit 1
              ;;
          esac

          # Determine service configuration path in Helm values
          case "$SERVICE" in
            "flutto-frontend")
              VALUES_FILE="platform/helm/flutto-platform/values/${ENV_FILE}.yaml"
              SERVICE_KEY="frontend"
              ;;
            "project_management_flutto")
              VALUES_FILE="platform/helm/flutto-platform/values/${ENV_FILE}.yaml"
              SERVICE_KEY="openproject"
              ;;
            *)
              echo "‚ö†Ô∏è Unsupported service: $SERVICE"
              exit 1
              ;;
          esac

          echo "Updating values file: $VALUES_FILE"
          echo "Service key: $SERVICE_KEY"
          echo "New tag: ${{ steps.tag.outputs.tag }}"

          # Check if values file exists
          if [[ ! -f "$VALUES_FILE" ]]; then
            echo "‚ö†Ô∏è Values file not found: $VALUES_FILE"
            echo "Available values files:"
            find platform/helm/flutto-platform/values/ -name "*.yaml" -type f | head -10
            exit 1
          fi

          # Install yq if not available
          if ! command -v yq >/dev/null 2>&1; then
            echo "üì¶ Installing yq..."
            wget -qO /tmp/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
            chmod +x /tmp/yq
            sudo mv /tmp/yq /usr/local/bin/yq
          fi

          # Update image tag in values file
          echo "Using yq to update Helm values"
          yq eval -i ".${SERVICE_KEY}.image.tag = \"${{ steps.tag.outputs.tag }}\"" "$VALUES_FILE"

          # Verify update
          UPDATED_TAG=$(yq eval ".${SERVICE_KEY}.image.tag" "$VALUES_FILE")
          if [[ "$UPDATED_TAG" == "${{ steps.tag.outputs.tag }}" ]]; then
            echo "‚úÖ Successfully updated tag in values file"
            echo "New tag value: $UPDATED_TAG"
          else
            echo "‚ùå Failed to update tag in values file"
            echo "Expected: ${{ steps.tag.outputs.tag }}"
            echo "Found: $UPDATED_TAG"
            exit 1
          fi

          # Show the changes
          echo "üìã Changes made to $VALUES_FILE:"
          git diff "$VALUES_FILE" || true

          # Commit and push
          git add "$VALUES_FILE"
          git commit -m "üöÄ Deploy ${{ inputs.service_name }} ${{ steps.tag.outputs.tag }} to ${{ steps.tag.outputs.environment }}

          Deployment Details:
          - Service: ${{ inputs.service_name }}
          - Environment: ${{ steps.tag.outputs.environment }}
          - Values File: $VALUES_FILE
          - Service Key: $SERVICE_KEY
          - Image Tag: ${{ steps.tag.outputs.tag }}
          - Image: ghcr.io/zenvinnovations/${{ inputs.service_name }}:${{ steps.tag.outputs.tag }}
          - Branch: ${GITHUB_REF#refs/heads/}
          - Commit: ${{ github.sha }}
          - Actor: ${{ github.actor }}
          - Workflow Run: ${{ github.run_id }}"

          git push origin main
          echo "‚úÖ Helm values updated and pushed successfully"

      - name: Create Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Service | ${{ inputs.service_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ steps.tag.outputs.environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tag | ${{ steps.tag.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch | ${GITHUB_REF#refs/heads/} |" >> $GITHUB_STEP_SUMMARY
          echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Actor | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.tag.outputs.environment }}" != "pr" && "${{ steps.tag.outputs.environment }}" != "feature" ]]; then
            echo "### üåê Deployment URLs" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            case "${{ inputs.service_name }}" in
              "flutto-frontend")
                case "${{ steps.tag.outputs.environment }}" in
                  "production") echo "- **Production**: https://zenv.flutto.ai" >> $GITHUB_STEP_SUMMARY ;;
                  "staging") echo "- **Staging**: https://staging.flutto.ai" >> $GITHUB_STEP_SUMMARY ;;
                  "development") echo "- **Development**: https://dev.flutto.ai" >> $GITHUB_STEP_SUMMARY ;;
                esac
                ;;
              "project_management_flutto")
                case "${{ steps.tag.outputs.environment }}" in
                  "production")
                    echo "- **Production API**: https://backend.flutto.ai" >> $GITHUB_STEP_SUMMARY
                    echo "- **Health Check**: https://backend.flutto.ai/health_checks/default" >> $GITHUB_STEP_SUMMARY
                    ;;
                  "staging")
                    echo "- **Staging API**: https://stage-backend.flutto.ai" >> $GITHUB_STEP_SUMMARY
                    echo "- **Health Check**: https://stage-backend.flutto.ai/health_checks/default" >> $GITHUB_STEP_SUMMARY
                    ;;
                  "development")
                    echo "- **Development API**: https://develop-backend.flutto.ai" >> $GITHUB_STEP_SUMMARY
                    echo "- **Health Check**: https://develop-backend.flutto.ai/health_checks/default" >> $GITHUB_STEP_SUMMARY
                    ;;
                esac
                ;;
            esac
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- ArgoCD will automatically sync and deploy within 3 minutes" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor deployment in ArgoCD dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- Verify application health at the URLs above" >> $GITHUB_STEP_SUMMARY